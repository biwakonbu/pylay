types:
  RefResolver:
    type: class
    bases: []
    docstring: "参照解決と循環参照検出を担当するクラス。\n\nこのクラスは、TypeSpec間の参照を解決し、循環参照を検出するための静的メソッドを提供します。"
  detect_cycles_from_data:
    type: function
    args:
      types_data: dict[str, Any]
    returns: None
    docstring: "生のデータから循環参照を検出します。\n\nArgs:\n    types_data: 型データ辞書（キー: 型名, 値: 型仕様）\n\
      \nRaises:\n    ValueError: 循環参照が検出された場合"
  detect_cycles:
    type: function
    args:
      types: dict[str, TypeSpec]
    returns: None
    docstring: "TypeSpec辞書から循環参照を検出します。\n\nArgs:\n    types: 型マップ（キー: 型名, 値: TypeSpec）\n\
      \nRaises:\n    ValueError: 循環参照が検出された場合"
  resolve_all:
    type: function
    args:
      types: dict[str, TypeSpec]
    returns: dict[str, TypeSpec]
    docstring: "すべての参照を解決します。\n\nArgs:\n    types: 型マップ（キー: 型名, 値: TypeSpec）\n\nReturns:\n\
      \    参照が解決されたTypeSpecマップ"
  _dfs_cycle_detect:
    type: function
    args:
      ref_graph: dict[str, list[str]]
    returns: None
    docstring: "DFSアルゴリズムで循環参照を検出します。\n\nArgs:\n    ref_graph: 参照グラフ（キー: 型名, 値: 参照リスト）\n\
      \nRaises:\n    ValueError: 循環参照が検出された場合"
  _collect_refs_from_data:
    type: function
    args:
      spec_data: Any
    returns: list[str]
    docstring: "生のデータから参照文字列を収集します。\n\nArgs:\n    spec_data: 型仕様データ\n\nReturns:\n\
      \    参照文字列のリスト"
  _collect_refs_from_spec:
    type: function
    args:
      spec: TypeSpec
    returns: list[str]
    docstring: "TypeSpecから参照文字列を収集します。\n\nArgs:\n    spec: TypeSpecインスタンス\n\nReturns:\n\
      \    参照文字列のリスト"
  has_cycle:
    type: function
    args:
      node: str
    returns: bool
    docstring: