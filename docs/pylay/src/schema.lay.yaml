# ====================================
# pylay自動生成ファイル
# このファイルを直接編集しないでください
# 次回の pylay yaml 実行時に削除・再生成されます
# ====================================
# Generated by: pylay yaml /home/biwakonbu/github/pylay/src
# Source: /home/biwakonbu/github/pylay/src
# Generated at: 2025-10-08T14:57:32.785172+00:00

_metadata:
  generated_by: pylay yaml
  source: /home/biwakonbu/github/pylay/src
  source_type: directory
  file_count: 25
  generated_at: 2025-10-08T14:57:32.786093+00:00
  pylay_version: 0.5.0

CodeContext:
  type: dict
  description: コードコンテキスト情報
  required: true
  properties:
    before_lines:
      name: list[str]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    target_line:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    after_lines:
      name: list[str]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    line_number:
      name: LineNumber
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
TypeIgnoreIssue:
  type: dict
  description: 'type: ignore の問題箇所の情報'
  required: true
  properties:
    file_path:
      name: FilePath
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    line_number:
      name: LineNumber
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    ignore_type:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    cause:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    detail:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    code_context:
      name: CodeContext
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    priority:
      name: Priority
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    solutions:
      name: list[str]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
TypeIgnoreSummary:
  type: dict
  description: 'type: ignore 全体のサマリー情報'
  required: true
  properties:
    total_count:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    high_priority_count:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    medium_priority_count:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    low_priority_count:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    by_category:
      name: dict[str, int]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
CodeLocation:
  type: dict
  description: コードの位置情報
  required: true
  properties:
    file:
      name: Path
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    line:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    column:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    context_before:
      name: list[str]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    code:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    context_after:
      name: list[str]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
QualityIssue:
  type: dict
  description: 品質問題の情報
  required: true
  properties:
    issue_type:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    severity:
      name: SeverityName
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    message:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    location:
      name: CodeLocation | None
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    suggestion:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    improvement_plan:
      name: str
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    recommended_type:
      name: str | None
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    primitive_type:
      name: str | None
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    priority_score:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    impact_score:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    difficulty_score:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
QualityCheckResult:
  type: dict
  description: 品質チェックの結果
  required: true
  properties:
    total_issues:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    error_count:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    warning_count:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    advice_count:
      name: int
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    has_errors:
      name: bool
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    overall_score:
      name: Annotated[float, Field(ge=0.0, le=1.0)]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    issues:
      name: list[QualityIssue]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    statistics:
      name: TypeStatistics
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    thresholds:
      name: LevelThresholds
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    severity_levels:
      name: list[SeverityLevel]
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
TypeDefinition:
  type: dict
  description: "型定義の情報\n\nAttributes:\n    name: 型の名前\n    level: 型定義レベル（level1/level2/level3/other）\n\
    \    file_path: ファイルパス\n    line_number: 行番号\n    definition: 型定義のコード\n    category:
    型のカテゴリ（type_alias/annotated/basemodel/class/dataclass等）\n    docstring: docstring（存在する場合）\n\
    \    has_docstring: docstringが存在するか\n    docstring_lines: docstringの行数\n    target_level:
    docstringで指定された目標レベル\n        （@target-level: level1/level2/level3）\n    keep_as_is:
    現状維持フラグ（@keep-as-is: trueの場合はレベルアップ推奨しない）"
  required: true
  properties:
    name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    level:
      name: Literal
      type: unknown
      description:
      required: true
    file_path:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    line_number:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    definition:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    category:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    docstring:
      name: Union[str, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
      - NoneType
    has_docstring:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    docstring_lines:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    target_level:
      name: Union[Literal, NoneType]
      type: union
      description:
      required: true
      variants:
      - name: Literal
        type: unknown
        description:
        required: true
      - NoneType
    keep_as_is:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
DocstringDetail:
  type: dict
  description: "docstringの詳細情報\n\nAttributes:\n    has_summary: 概要行が存在するか\n    has_description:
    詳細説明が存在するか\n    has_attributes: Attributesセクションが存在するか\n    has_args: Argsセクションが存在するか\n\
    \    has_returns: Returnsセクションが存在するか\n    has_examples: Examplesセクションが存在するか\n\
    \    format_style: docstringフォーマット\n    line_count: docstringの行数\n    detail_score:
    詳細度スコア（0.0-1.0）"
  required: true
  properties:
    has_summary:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    has_description:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    has_attributes:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    has_args:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    has_returns:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    has_examples:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    format_style:
      name: Literal
      type: unknown
      description:
      required: true
    line_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    detail_score:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
  additional_properties: false
DocumentationStatistics:
  type: dict
  description: "ドキュメント統計情報\n\nAttributes:\n    total_types: 型定義の総数\n    documented_types:
    docstringが存在する型の数\n    undocumented_types: docstringが存在しない型の数\n    implementation_rate:
    実装率（0.0-1.0）\n    minimal_docstrings: 最低限のdocstring（1行のみ）の数\n    detailed_docstrings:
    詳細なdocstringの数\n    detail_rate: 詳細度率（0.0-1.0）\n    avg_docstring_lines: 平均docstring行数\n\
    \    quality_score: 総合品質スコア（実装率 × 詳細度）\n    by_level: レベル別のdocstring統計（カウント値のみ）\n\
    \    by_level_avg_lines: レベル別の平均docstring行数\n    by_format: フォーマット別のdocstring数"
  required: true
  properties:
    total_types:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    documented_types:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    undocumented_types:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    implementation_rate:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    minimal_docstrings:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    detailed_docstrings:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    detail_rate:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    avg_docstring_lines:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    quality_score:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    by_level:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        dict:
          name: dict
          type: dict
          description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
            initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
            -> new dictionary initialized as if via:\n    d = {}\n    for k, v in
            iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
            with the name=value pairs\n    in the keyword argument list.  For example:\
            \  dict(one=1, two=2)"
          required: true
          properties:
            int:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
          additional_properties: false
      additional_properties: false
    by_level_avg_lines:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        float:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
      additional_properties: false
    by_format:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        int:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
      additional_properties: false
  additional_properties: false
DocstringRecommendation:
  type: dict
  description: "docstring改善推奨\n\nAttributes:\n    type_name: 型名\n    file_path: ファイルパス\n\
    \    line_number: 行番号\n    current_status: 現在の状態\n    recommended_action: 推奨アクション\n\
    \    priority: 優先度\n    reasons: 推奨理由\n    suggested_template: 推奨docstringテンプレート\n\
    \    detail_gaps: 不足しているセクション"
  required: true
  properties:
    type_name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    file_path:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    line_number:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    current_status:
      name: Literal
      type: unknown
      description:
      required: true
    recommended_action:
      name: Literal
      type: unknown
      description:
      required: true
    priority:
      name: Literal
      type: unknown
      description:
      required: true
    reasons:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items:
        name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
    suggested_template:
      name: Union[str, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
      - NoneType
    detail_gaps:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items:
        name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
  additional_properties: false
TypeStatistics:
  type: dict
  description: "型定義の統計情報\n\nAttributes:\n    total_count: 型定義の総数\n    level1_count:
    Level 1の数\n    level2_count: Level 2の数\n    level3_count: Level 3の数\n    other_count:
    その他の数\n    level1_ratio: Level 1の比率\n    level2_ratio: Level 2の比率\n    level3_ratio:
    Level 3の比率\n    other_ratio: その他の比率\n    by_directory: ディレクトリ別の統計\n    by_category:
    カテゴリ別の統計\n    documentation: ドキュメント統計\n    primitive_usage_count: primitive型の直接使用数\n\
    \    deprecated_typing_count: 非推奨typing使用数\n    primitive_usage_ratio: primitive型の直接使用比率\n\
    \    deprecated_typing_ratio: 非推奨typing使用比率"
  required: true
  properties:
    total_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    level1_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    level2_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    level3_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    other_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    level1_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    level2_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    level3_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    other_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    by_directory:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        dict:
          name: dict
          type: dict
          description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
            initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
            -> new dictionary initialized as if via:\n    d = {}\n    for k, v in
            iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
            with the name=value pairs\n    in the keyword argument list.  For example:\
            \  dict(one=1, two=2)"
          required: true
          properties:
            int:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
          additional_properties: false
      additional_properties: false
    by_category:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        int:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
      additional_properties: false
    documentation:
      name: DocumentationStatistics
      type: dict
      description: "ドキュメント統計情報\n\nAttributes:\n    total_types: 型定義の総数\n    documented_types:
        docstringが存在する型の数\n    undocumented_types: docstringが存在しない型の数\n    implementation_rate:
        実装率（0.0-1.0）\n    minimal_docstrings: 最低限のdocstring（1行のみ）の数\n    detailed_docstrings:
        詳細なdocstringの数\n    detail_rate: 詳細度率（0.0-1.0）\n    avg_docstring_lines: 平均docstring行数\n\
        \    quality_score: 総合品質スコア（実装率 × 詳細度）\n    by_level: レベル別のdocstring統計（カウント値のみ）\n\
        \    by_level_avg_lines: レベル別の平均docstring行数\n    by_format: フォーマット別のdocstring数"
      required: true
      properties:
        total_types:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        documented_types:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        undocumented_types:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        implementation_rate:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        minimal_docstrings:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        detailed_docstrings:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        detail_rate:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        avg_docstring_lines:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        quality_score:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        by_level:
          name: dict
          type: dict
          description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
            initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
            -> new dictionary initialized as if via:\n    d = {}\n    for k, v in
            iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
            with the name=value pairs\n    in the keyword argument list.  For example:\
            \  dict(one=1, two=2)"
          required: true
          properties:
            dict:
              name: dict
              type: dict
              description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
                initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
                -> new dictionary initialized as if via:\n    d = {}\n    for k, v
                in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
                with the name=value pairs\n    in the keyword argument list.  For
                example:  dict(one=1, two=2)"
              required: true
              properties:
                int:
                  name: int
                  type: int
                  description: "int([x]) -> integer\nint(x, base=10) -> integer\n\n\
                    Convert a number or string to an integer, or return 0 if no arguments\n\
                    are given.  If x is a number, return x.__int__().  For floating-point\n\
                    numbers, this truncates towards zero.\n\nIf x is not a number
                    or if base is given, then x must be a string,\nbytes, or bytearray
                    instance representing an integer literal in the\ngiven base. \
                    \ The literal can be preceded by '+' or '-' and be surrounded\n\
                    by whitespace.  The base defaults to 10.  Valid bases are 0 and
                    2-36.\nBase 0 means to interpret the base from the string as an
                    integer literal.\n>>> int('0b100', base=0)\n4"
                  required: true
              additional_properties: false
          additional_properties: false
        by_level_avg_lines:
          name: dict
          type: dict
          description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
            initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
            -> new dictionary initialized as if via:\n    d = {}\n    for k, v in
            iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
            with the name=value pairs\n    in the keyword argument list.  For example:\
            \  dict(one=1, two=2)"
          required: true
          properties:
            float:
              name: float
              type: float
              description: Convert a string or number to a floating-point
                number, if possible.
              required: true
          additional_properties: false
        by_format:
          name: dict
          type: dict
          description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
            initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
            -> new dictionary initialized as if via:\n    d = {}\n    for k, v in
            iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
            with the name=value pairs\n    in the keyword argument list.  For example:\
            \  dict(one=1, two=2)"
          required: true
          properties:
            int:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
          additional_properties: false
      additional_properties: false
    primitive_usage_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    deprecated_typing_count:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    primitive_usage_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    deprecated_typing_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
  additional_properties: false
UpgradeRecommendation:
  type: dict
  description: "型レベルアップ・ダウンの推奨事項\n\nAttributes:\n    type_name: 型名\n    file_path:
    ファイルパス\n    line_number: 行番号\n    current_level: 現在のレベル\n    recommended_level:
    推奨レベル（level1/level2/level3/investigate）\n    confidence: 確信度（0.0-1.0）\n    reasons:
    推奨理由\n    suggested_validator: Level 2への昇格時のバリデータコード\n    suggested_implementation:
    Level 3への昇格時の実装例\n    priority: 優先度\n    is_downgrade: レベルダウン推奨の場合True"
  required: true
  properties:
    type_name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    file_path:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    line_number:
      name: int
      type: int
      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number
        or string to an integer, or return 0 if no arguments\nare given.  If x is
        a number, return x.__int__().  For floating-point\nnumbers, this truncates
        towards zero.\n\nIf x is not a number or if base is given, then x must be
        a string,\nbytes, or bytearray instance representing an integer literal in
        the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\n\
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase
        0 means to interpret the base from the string as an integer literal.\n>>>
        int('0b100', base=0)\n4"
      required: true
    current_level:
      name: Literal
      type: unknown
      description:
      required: true
    recommended_level:
      name: Literal
      type: unknown
      description:
      required: true
    confidence:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    reasons:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items:
        name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
    suggested_validator:
      name: Union[str, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
      - NoneType
    suggested_implementation:
      name: Union[str, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
      - NoneType
    priority:
      name: Literal
      type: unknown
      description:
      required: true
    is_downgrade:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
TypeAnalysisReport:
  type: dict
  description: "型定義分析レポート\n\nAttributes:\n    statistics: 統計情報\n    type_definitions:
    型定義リスト\n    recommendations: 一般的な推奨事項\n    upgrade_recommendations: 型レベルアップ推奨\n\
    \    docstring_recommendations: docstring改善推奨\n    threshold_ratios: 警告閾値（level1_max/level2_min/level3_min）\n\
    \    deviation_from_threshold: 警告閾値との乖離"
  required: true
  properties:
    statistics:
      name: TypeStatistics
      type: dict
      description: "型定義の統計情報\n\nAttributes:\n    total_count: 型定義の総数\n    level1_count:
        Level 1の数\n    level2_count: Level 2の数\n    level3_count: Level 3の数\n    other_count:
        その他の数\n    level1_ratio: Level 1の比率\n    level2_ratio: Level 2の比率\n    level3_ratio:
        Level 3の比率\n    other_ratio: その他の比率\n    by_directory: ディレクトリ別の統計\n    by_category:
        カテゴリ別の統計\n    documentation: ドキュメント統計\n    primitive_usage_count: primitive型の直接使用数\n\
        \    deprecated_typing_count: 非推奨typing使用数\n    primitive_usage_ratio: primitive型の直接使用比率\n\
        \    deprecated_typing_ratio: 非推奨typing使用比率"
      required: true
      properties:
        total_count:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        level1_count:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        level2_count:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        level3_count:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        other_count:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        level1_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        level2_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        level3_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        other_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        by_directory:
          name: dict
          type: dict
          description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
            initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
            -> new dictionary initialized as if via:\n    d = {}\n    for k, v in
            iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
            with the name=value pairs\n    in the keyword argument list.  For example:\
            \  dict(one=1, two=2)"
          required: true
          properties:
            dict:
              name: dict
              type: dict
              description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
                initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
                -> new dictionary initialized as if via:\n    d = {}\n    for k, v
                in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
                with the name=value pairs\n    in the keyword argument list.  For
                example:  dict(one=1, two=2)"
              required: true
              properties:
                int:
                  name: int
                  type: int
                  description: "int([x]) -> integer\nint(x, base=10) -> integer\n\n\
                    Convert a number or string to an integer, or return 0 if no arguments\n\
                    are given.  If x is a number, return x.__int__().  For floating-point\n\
                    numbers, this truncates towards zero.\n\nIf x is not a number
                    or if base is given, then x must be a string,\nbytes, or bytearray
                    instance representing an integer literal in the\ngiven base. \
                    \ The literal can be preceded by '+' or '-' and be surrounded\n\
                    by whitespace.  The base defaults to 10.  Valid bases are 0 and
                    2-36.\nBase 0 means to interpret the base from the string as an
                    integer literal.\n>>> int('0b100', base=0)\n4"
                  required: true
              additional_properties: false
          additional_properties: false
        by_category:
          name: dict
          type: dict
          description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
            initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
            -> new dictionary initialized as if via:\n    d = {}\n    for k, v in
            iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
            with the name=value pairs\n    in the keyword argument list.  For example:\
            \  dict(one=1, two=2)"
          required: true
          properties:
            int:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
          additional_properties: false
        documentation:
          name: DocumentationStatistics
          type: dict
          description: "ドキュメント統計情報\n\nAttributes:\n    total_types: 型定義の総数\n    documented_types:
            docstringが存在する型の数\n    undocumented_types: docstringが存在しない型の数\n    implementation_rate:
            実装率（0.0-1.0）\n    minimal_docstrings: 最低限のdocstring（1行のみ）の数\n    detailed_docstrings:
            詳細なdocstringの数\n    detail_rate: 詳細度率（0.0-1.0）\n    avg_docstring_lines:
            平均docstring行数\n    quality_score: 総合品質スコア（実装率 × 詳細度）\n    by_level: レベル別のdocstring統計（カウント値のみ）\n\
            \    by_level_avg_lines: レベル別の平均docstring行数\n    by_format: フォーマット別のdocstring数"
          required: true
          properties:
            total_types:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
            documented_types:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
            undocumented_types:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
            implementation_rate:
              name: float
              type: float
              description: Convert a string or number to a floating-point
                number, if possible.
              required: true
            minimal_docstrings:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
            detailed_docstrings:
              name: int
              type: int
              description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
                a number or string to an integer, or return 0 if no arguments\nare
                given.  If x is a number, return x.__int__().  For floating-point\n\
                numbers, this truncates towards zero.\n\nIf x is not a number or if
                base is given, then x must be a string,\nbytes, or bytearray instance
                representing an integer literal in the\ngiven base.  The literal can
                be preceded by '+' or '-' and be surrounded\nby whitespace.  The base
                defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                the base from the string as an integer literal.\n>>> int('0b100',
                base=0)\n4"
              required: true
            detail_rate:
              name: float
              type: float
              description: Convert a string or number to a floating-point
                number, if possible.
              required: true
            avg_docstring_lines:
              name: float
              type: float
              description: Convert a string or number to a floating-point
                number, if possible.
              required: true
            quality_score:
              name: float
              type: float
              description: Convert a string or number to a floating-point
                number, if possible.
              required: true
            by_level:
              name: dict
              type: dict
              description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
                initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
                -> new dictionary initialized as if via:\n    d = {}\n    for k, v
                in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
                with the name=value pairs\n    in the keyword argument list.  For
                example:  dict(one=1, two=2)"
              required: true
              properties:
                dict:
                  name: dict
                  type: dict
                  description: "dict() -> new empty dictionary\ndict(mapping) -> new
                    dictionary initialized from a mapping object's\n    (key, value)
                    pairs\ndict(iterable) -> new dictionary initialized as if via:\n\
                    \    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs)
                    -> new dictionary initialized with the name=value pairs\n    in
                    the keyword argument list.  For example:  dict(one=1, two=2)"
                  required: true
                  properties:
                    int:
                      name: int
                      type: int
                      description: "int([x]) -> integer\nint(x, base=10) -> integer\n\
                        \nConvert a number or string to an integer, or return 0 if
                        no arguments\nare given.  If x is a number, return x.__int__().\
                        \  For floating-point\nnumbers, this truncates towards zero.\n\
                        \nIf x is not a number or if base is given, then x must be
                        a string,\nbytes, or bytearray instance representing an integer
                        literal in the\ngiven base.  The literal can be preceded by
                        '+' or '-' and be surrounded\nby whitespace.  The base defaults
                        to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret
                        the base from the string as an integer literal.\n>>> int('0b100',
                        base=0)\n4"
                      required: true
                  additional_properties: false
              additional_properties: false
            by_level_avg_lines:
              name: dict
              type: dict
              description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
                initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
                -> new dictionary initialized as if via:\n    d = {}\n    for k, v
                in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
                with the name=value pairs\n    in the keyword argument list.  For
                example:  dict(one=1, two=2)"
              required: true
              properties:
                float:
                  name: float
                  type: float
                  description: Convert a string or number to a floating-point
                    number, if possible.
                  required: true
              additional_properties: false
            by_format:
              name: dict
              type: dict
              description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
                initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
                -> new dictionary initialized as if via:\n    d = {}\n    for k, v
                in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized
                with the name=value pairs\n    in the keyword argument list.  For
                example:  dict(one=1, two=2)"
              required: true
              properties:
                int:
                  name: int
                  type: int
                  description: "int([x]) -> integer\nint(x, base=10) -> integer\n\n\
                    Convert a number or string to an integer, or return 0 if no arguments\n\
                    are given.  If x is a number, return x.__int__().  For floating-point\n\
                    numbers, this truncates towards zero.\n\nIf x is not a number
                    or if base is given, then x must be a string,\nbytes, or bytearray
                    instance representing an integer literal in the\ngiven base. \
                    \ The literal can be preceded by '+' or '-' and be surrounded\n\
                    by whitespace.  The base defaults to 10.  Valid bases are 0 and
                    2-36.\nBase 0 means to interpret the base from the string as an
                    integer literal.\n>>> int('0b100', base=0)\n4"
                  required: true
              additional_properties: false
          additional_properties: false
        primitive_usage_count:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        deprecated_typing_count:
          name: int
          type: int
          description: "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert
            a number or string to an integer, or return 0 if no arguments\nare given.\
            \  If x is a number, return x.__int__().  For floating-point\nnumbers,
            this truncates towards zero.\n\nIf x is not a number or if base is given,
            then x must be a string,\nbytes, or bytearray instance representing an
            integer literal in the\ngiven base.  The literal can be preceded by '+'
            or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid
            bases are 0 and 2-36.\nBase 0 means to interpret the base from the string
            as an integer literal.\n>>> int('0b100', base=0)\n4"
          required: true
        primitive_usage_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        deprecated_typing_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
      additional_properties: false
    type_definitions:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: TypeDefinition
    recommendations:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items:
        name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
    upgrade_recommendations:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: UpgradeRecommendation
    docstring_recommendations:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: DocstringRecommendation
    threshold_ratios:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        float:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
      additional_properties: false
    deviation_from_threshold:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        float:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
      additional_properties: false
  additional_properties: false
RefPlaceholder:
  type: dict
  description: 参照文字列を保持するためのプレースホルダー（Pydantic v2対応強化）
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    ref_name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
  additional_properties: false
TypeSpec:
  type: dict
  description: YAML形式の型仕様の基底モデル（v1.1対応、循環参照耐性強化）
  required: true
  properties:
    name:
      name: Union[TypeSpecName, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - TypeSpecName
      - NoneType
    type:
      name: TypeSpecType
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    description:
      name: Union[Description, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - Description
      - NoneType
    required:
      name: RequiredFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
ListTypeSpec:
  type: dict
  description: リスト型の仕様
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    items:
      name: Any
      type: dict
      description: "Special type indicating an unconstrained type.\n\n- Any is compatible
        with every type.\n- Any assumed to have all methods.\n- All values assumed
        to be instances of Any.\n\nNote that all the above statements are true from
        the point of view of\nstatic type checkers. At runtime, Any should not be
        used with instance\nchecks."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
DictTypeSpec:
  type: dict
  description: 辞書型の仕様（プロパティの型をTypeSpecOrRefに統一）
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    properties:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        Any: Any
      additional_properties: false
    additional_properties:
      name: AdditionalPropertiesFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
UnionTypeSpec:
  type: dict
  description: "Union型の仕様（参照型をTypeSpecOrRefに統一）\n\nUnion型の型仕様を定義します。参照型はTypeSpecOrRefに統一されています。"
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    variants:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: Any
  additional_properties: false
GenericTypeSpec:
  type: dict
  description: "Generic型の仕様（例: Generic[T]）（参照型をTypeSpecOrRefに統一）\n\nGeneric型の型仕様を定義します（例:
    Generic[T]）。\n参照型はTypeSpecOrRefに統一されています。"
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    params:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: Any
  additional_properties: false
TypeRoot:
  type: dict
  description: YAML型仕様のルートモデル (v1.1構造、循環耐性強化）
  required: true
  properties:
    types:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
RelationType:
  type: dict
  description: 関係の種類を定義する列挙型
  required: true
  properties: {}
  additional_properties: false
GraphNode:
  type: dict
  description: "グラフのノードを表すクラス\n\nAttributes:\n    id: ノードの一意の識別子 (自動生成可能)\n    name:
    ノードの名前\n    node_type: ノードの種類\n    qualified_name: 完全修飾名\n    attributes: ノードの追加属性"
  required: true
  properties:
    id:
      name: Union[NodeId, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - NodeId
      - NoneType
    name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    node_type:
      name: NodeType
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    qualified_name:
      name: Union[QualifiedName, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - QualifiedName
      - NoneType
    attributes:
      name: Union[NodeAttributes, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - NodeAttributes
      - NoneType
    source_file:
      name: Union[FilePath, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - FilePath
      - NoneType
    line_number:
      name: Union[LineNumber, NoneType]
      type: union
      description:
      required: true
      variants:
      - LineNumber
      - NoneType
  additional_properties: false
GraphEdge:
  type: dict
  description: "グラフのエッジを表すクラス\n\nAttributes:\n    source: 始点ノードのID\n    target: 終点ノードのID\n\
    \    relation_type: 関係の種類\n    weight: エッジの重み\n    attributes: エッジの追加属性"
  required: true
  properties:
    source:
      name: NodeId
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    target:
      name: NodeId
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    relation_type:
      name: RelationType
      type: dict
      description: 関係の種類を定義する列挙型
      required: true
      properties: {}
      additional_properties: false
    weight:
      name: Weight
      type: dict
      description: "NewType creates simple unique types with almost zero runtime overhead.\n\
        \nNewType(name, tp) is considered a subtype of tp\nby static type checkers.
        At runtime, NewType(name, tp) returns\na dummy callable that simply returns
        its argument.\n\nUsage::\n\n    UserId = NewType('UserId', int)\n\n    def
        name_by_id(user_id: UserId) -> str:\n        ...\n\n    UserId('user')   \
        \       # Fails type check\n\n    name_by_id(42)          # Fails type check\n\
        \    name_by_id(UserId(42))  # OK\n\n    num = UserId(5) + 1     # type: int"
      required: true
      properties: {}
      additional_properties: false
    attributes:
      name: Union[NodeAttributes, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - NodeAttributes
      - NoneType
    metadata:
      name: Union[GraphMetadata, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - GraphMetadata
      - NoneType
  additional_properties: false
TypeDependencyGraph:
  type: dict
  description: "型依存関係グラフを表すクラス\n\nAttributes:\n    nodes: グラフ内の全てのノード\n    edges:
    グラフ内の全てのエッジ\n    metadata: グラフのメタデータ"
  required: true
  properties:
    nodes:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: GraphNode
    edges:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: GraphEdge
    metadata:
      name: Union[GraphMetadata, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - GraphMetadata
      - NoneType
    inferred_nodes:
      name: Union[list, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - name: list
        type: list
        description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
          creates a new empty list.\nThe argument must be an iterable if specified."
        required: true
        items: GraphNode
      - NoneType
  additional_properties: false
LevelThresholds:
  type: dict
  description: 型レベル閾値設定
  required: true
  properties:
    level1_max:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    level2_min:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    level3_min:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
  additional_properties: false
ErrorCondition:
  type: dict
  description: エラー条件設定
  required: true
  properties:
    condition:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    message:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
  additional_properties: false
SeverityLevel:
  type: dict
  description: 深刻度レベル設定
  required: true
  properties:
    name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    color:
      name: Literal
      type: unknown
      description:
      required: true
    threshold:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
  additional_properties: false
ImprovementGuidance:
  type: dict
  description: 改善プランのガイダンス設定
  required: true
  properties:
    level:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    suggestion:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
  additional_properties: false
GenerationConfig:
  type: dict
  description: ファイル生成設定
  required: true
  properties:
    lay_suffix:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    lay_yaml_suffix:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    add_generation_header:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    include_source_path:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
OutputConfig:
  type: dict
  description: 出力設定
  required: true
  properties:
    yaml_output_dir:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    mirror_package_structure:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    include_metadata:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    preserve_docstrings:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
ImportsConfig:
  type: dict
  description: import設定
  required: true
  properties:
    use_relative_imports:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
QualityCheckConfig:
  type: dict
  description: 品質チェック設定
  required: true
  properties:
    level_thresholds:
      name: LevelThresholds
      type: dict
      description: 型レベル閾値設定
      required: true
      properties:
        level1_max:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        level2_min:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        level3_min:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
      additional_properties: false
    error_conditions:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: ErrorCondition
    severity_levels:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: SeverityLevel
    improvement_guidance:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: ImprovementGuidance
  additional_properties: false
PylayConfig:
  type: dict
  description: "pylayの設定を管理するPydanticモデル\n\npyproject.tomlの[tool.pylay]セクションに対応します。"
  required: true
  properties:
    target_dirs:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items:
        name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
    output_dir:
      name: DirectoryPath
      type: dict
      description: "NewType creates simple unique types with almost zero runtime overhead.\n\
        \nNewType(name, tp) is considered a subtype of tp\nby static type checkers.
        At runtime, NewType(name, tp) returns\na dummy callable that simply returns
        its argument.\n\nUsage::\n\n    UserId = NewType('UserId', int)\n\n    def
        name_by_id(user_id: UserId) -> str:\n        ...\n\n    UserId('user')   \
        \       # Fails type check\n\n    name_by_id(42)          # Fails type check\n\
        \    name_by_id(UserId(42))  # OK\n\n    num = UserId(5) + 1     # type: int"
      required: true
      properties: {}
      additional_properties: false
    generate_markdown:
      name: GenerateMarkdownFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    extract_deps:
      name: ExtractDepsFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    infer_level:
      name: InferLevel
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    clean_output_dir:
      name: CleanOutputDirFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    exclude_patterns:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: GlobPattern
    max_depth:
      name: MaxDepth
      type: dict
      description: "NewType creates simple unique types with almost zero runtime overhead.\n\
        \nNewType(name, tp) is considered a subtype of tp\nby static type checkers.
        At runtime, NewType(name, tp) returns\na dummy callable that simply returns
        its argument.\n\nUsage::\n\n    UserId = NewType('UserId', int)\n\n    def
        name_by_id(user_id: UserId) -> str:\n        ...\n\n    UserId('user')   \
        \       # Fails type check\n\n    name_by_id(42)          # Fails type check\n\
        \    name_by_id(UserId(42))  # OK\n\n    num = UserId(5) + 1     # type: int"
      required: true
      properties: {}
      additional_properties: false
    quality_check:
      name: QualityCheckConfig | None
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    generation:
      name: GenerationConfig
      type: dict
      description: ファイル生成設定
      required: true
      properties:
        lay_suffix:
          name: str
          type: str
          description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
            -> str\n\nCreate a new string object from the given object. If encoding
            or\nerrors is specified, then the object must expose a data buffer\nthat
            will be decoded using the given encoding and error handler.\nOtherwise,
            returns the result of object.__str__() (if defined)\nor repr(object).\n\
            encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
          required: true
        lay_yaml_suffix:
          name: str
          type: str
          description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
            -> str\n\nCreate a new string object from the given object. If encoding
            or\nerrors is specified, then the object must expose a data buffer\nthat
            will be decoded using the given encoding and error handler.\nOtherwise,
            returns the result of object.__str__() (if defined)\nor repr(object).\n\
            encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
          required: true
        add_generation_header:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
        include_source_path:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
      additional_properties: false
    output:
      name: OutputConfig
      type: dict
      description: 出力設定
      required: true
      properties:
        yaml_output_dir:
          name: str
          type: str
          description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
            -> str\n\nCreate a new string object from the given object. If encoding
            or\nerrors is specified, then the object must expose a data buffer\nthat
            will be decoded using the given encoding and error handler.\nOtherwise,
            returns the result of object.__str__() (if defined)\nor repr(object).\n\
            encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
          required: true
        mirror_package_structure:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
        include_metadata:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
        preserve_docstrings:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
      additional_properties: false
    imports:
      name: ImportsConfig
      type: dict
      description: import設定
      required: true
      properties:
        use_relative_imports:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
      additional_properties: false
  additional_properties: false
