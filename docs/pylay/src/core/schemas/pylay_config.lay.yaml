# ====================================
# pylay自動生成ファイル
# このファイルを直接編集しないでください
# 次回の pylay yaml 実行時に削除・再生成されます
# ====================================
# Generated by: pylay yaml /home/biwakonbu/github/pylay/src/core/schemas/pylay_config.py
# Source: /home/biwakonbu/github/pylay/src/core/schemas/pylay_config.py
# Generated at: 2025-10-08T10:42:38.159524+00:00

_metadata:
  generated_by: pylay yaml
  source: /home/biwakonbu/github/pylay/src/core/schemas/pylay_config.py
  generated_at: 2025-10-08T10:42:38.160187+00:00
  pylay_version: 0.5.0

LevelThresholds:
  type: dict
  description: 型レベル閾値設定
  required: true
  properties:
    level1_max:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    level2_min:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
    level3_min:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
  additional_properties: false
ErrorCondition:
  type: dict
  description: エラー条件設定
  required: true
  properties:
    condition:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    message:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
  additional_properties: false
SeverityLevel:
  type: dict
  description: 深刻度レベル設定
  required: true
  properties:
    name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    color:
      name: Literal
      type: unknown
      description:
      required: true
    threshold:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if
        possible.
      required: true
  additional_properties: false
ImprovementGuidance:
  type: dict
  description: 改善プランのガイダンス設定
  required: true
  properties:
    level:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    suggestion:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
  additional_properties: false
GenerationConfig:
  type: dict
  description: ファイル生成設定
  required: true
  properties:
    lay_suffix:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    lay_yaml_suffix:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    add_generation_header:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    include_source_path:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
OutputConfig:
  type: dict
  description: 出力設定
  required: true
  properties:
    yaml_output_dir:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
    mirror_package_structure:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    include_metadata:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
    preserve_docstrings:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
ImportsConfig:
  type: dict
  description: import設定
  required: true
  properties:
    use_relative_imports:
      name: bool
      type: bool
      description: "Returns True when the argument is true, False otherwise.\nThe
        builtins True and False are the only two instances of the class bool.\nThe
        class bool is a subclass of the class int, and cannot be subclassed."
      required: true
  additional_properties: false
QualityCheckConfig:
  type: dict
  description: 品質チェック設定
  required: true
  properties:
    level_thresholds:
      name: LevelThresholds
      type: dict
      description: 型レベル閾値設定
      required: true
      properties:
        level1_max:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        level2_min:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
        level3_min:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if
            possible.
          required: true
      additional_properties: false
    error_conditions:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: ErrorCondition
    severity_levels:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: SeverityLevel
    improvement_guidance:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: ImprovementGuidance
  additional_properties: false
PylayConfig:
  type: dict
  description: "pylayの設定を管理するPydanticモデル\n\npyproject.tomlの[tool.pylay]セクションに対応します。"
  required: true
  properties:
    target_dirs:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items:
        name: str
        type: str
        description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
          -> str\n\nCreate a new string object from the given object. If encoding
          or\nerrors is specified, then the object must expose a data buffer\nthat
          will be decoded using the given encoding and error handler.\nOtherwise,
          returns the result of object.__str__() (if defined)\nor repr(object).\n\
          encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
        required: true
    output_dir:
      name: DirectoryPath
      type: dict
      description: "NewType creates simple unique types with almost zero runtime overhead.\n\
        \nNewType(name, tp) is considered a subtype of tp\nby static type checkers.
        At runtime, NewType(name, tp) returns\na dummy callable that simply returns
        its argument.\n\nUsage::\n\n    UserId = NewType('UserId', int)\n\n    def
        name_by_id(user_id: UserId) -> str:\n        ...\n\n    UserId('user')   \
        \       # Fails type check\n\n    name_by_id(42)          # Fails type check\n\
        \    name_by_id(UserId(42))  # OK\n\n    num = UserId(5) + 1     # type: int"
      required: true
      properties: {}
      additional_properties: false
    generate_markdown:
      name: GenerateMarkdownFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    extract_deps:
      name: ExtractDepsFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    infer_level:
      name: InferLevel
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    clean_output_dir:
      name: CleanOutputDirFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    exclude_patterns:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: GlobPattern
    max_depth:
      name: MaxDepth
      type: dict
      description: "NewType creates simple unique types with almost zero runtime overhead.\n\
        \nNewType(name, tp) is considered a subtype of tp\nby static type checkers.
        At runtime, NewType(name, tp) returns\na dummy callable that simply returns
        its argument.\n\nUsage::\n\n    UserId = NewType('UserId', int)\n\n    def
        name_by_id(user_id: UserId) -> str:\n        ...\n\n    UserId('user')   \
        \       # Fails type check\n\n    name_by_id(42)          # Fails type check\n\
        \    name_by_id(UserId(42))  # OK\n\n    num = UserId(5) + 1     # type: int"
      required: true
      properties: {}
      additional_properties: false
    quality_check:
      name: QualityCheckConfig | None
      type: dict
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
      properties: {}
      additional_properties: false
    generation:
      name: GenerationConfig
      type: dict
      description: ファイル生成設定
      required: true
      properties:
        lay_suffix:
          name: str
          type: str
          description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
            -> str\n\nCreate a new string object from the given object. If encoding
            or\nerrors is specified, then the object must expose a data buffer\nthat
            will be decoded using the given encoding and error handler.\nOtherwise,
            returns the result of object.__str__() (if defined)\nor repr(object).\n\
            encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
          required: true
        lay_yaml_suffix:
          name: str
          type: str
          description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
            -> str\n\nCreate a new string object from the given object. If encoding
            or\nerrors is specified, then the object must expose a data buffer\nthat
            will be decoded using the given encoding and error handler.\nOtherwise,
            returns the result of object.__str__() (if defined)\nor repr(object).\n\
            encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
          required: true
        add_generation_header:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
        include_source_path:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
      additional_properties: false
    output:
      name: OutputConfig
      type: dict
      description: 出力設定
      required: true
      properties:
        yaml_output_dir:
          name: str
          type: str
          description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
            -> str\n\nCreate a new string object from the given object. If encoding
            or\nerrors is specified, then the object must expose a data buffer\nthat
            will be decoded using the given encoding and error handler.\nOtherwise,
            returns the result of object.__str__() (if defined)\nor repr(object).\n\
            encoding defaults to 'utf-8'.\nerrors defaults to 'strict'."
          required: true
        mirror_package_structure:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
        include_metadata:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
        preserve_docstrings:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
      additional_properties: false
    imports:
      name: ImportsConfig
      type: dict
      description: import設定
      required: true
      properties:
        use_relative_imports:
          name: bool
          type: bool
          description: "Returns True when the argument is true, False otherwise.\n\
            The builtins True and False are the only two instances of the class bool.\n\
            The class bool is a subclass of the class int, and cannot be subclassed."
          required: true
      additional_properties: false
  additional_properties: false
