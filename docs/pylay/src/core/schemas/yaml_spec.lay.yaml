# ====================================
# pylay自動生成ファイル
# このファイルを直接編集しないでください
# 次回の pylay yaml 実行時に削除・再生成されます
# ====================================
# Generated by: pylay yaml /home/biwakonbu/github/pylay/src/core/schemas/yaml_spec.py
# Source: /home/biwakonbu/github/pylay/src/core/schemas/yaml_spec.py
# Generated at: 2025-10-08T10:42:38.111497+00:00

_metadata:
  generated_by: pylay yaml
  source: /home/biwakonbu/github/pylay/src/core/schemas/yaml_spec.py
  generated_at: 2025-10-08T10:42:38.112230+00:00
  pylay_version: 0.5.0

RefPlaceholder:
  type: dict
  description: 参照文字列を保持するためのプレースホルダー（Pydantic v2対応強化）
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    ref_name:
      name: str
      type: str
      description: "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]])
        -> str\n\nCreate a new string object from the given object. If encoding or\n\
        errors is specified, then the object must expose a data buffer\nthat will
        be decoded using the given encoding and error handler.\nOtherwise, returns
        the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults
        to 'utf-8'.\nerrors defaults to 'strict'."
      required: true
  additional_properties: false
TypeSpec:
  type: dict
  description: YAML形式の型仕様の基底モデル（v1.1対応、循環参照耐性強化）
  required: true
  properties:
    name:
      name: Union[TypeSpecName, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - TypeSpecName
      - NoneType
    type:
      name: TypeSpecType
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
    description:
      name: Union[Description, NoneType]
      type: union
      description: "Represent a PEP 604 union type\n\nE.g. for int | str"
      required: true
      variants:
      - Description
      - NoneType
    required:
      name: RequiredFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
ListTypeSpec:
  type: dict
  description: リスト型の仕様
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    items:
      name: Any
      type: dict
      description: "Special type indicating an unconstrained type.\n\n- Any is compatible
        with every type.\n- Any assumed to have all methods.\n- All values assumed
        to be instances of Any.\n\nNote that all the above statements are true from
        the point of view of\nstatic type checkers. At runtime, Any should not be
        used with instance\nchecks."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
DictTypeSpec:
  type: dict
  description: 辞書型の仕様（プロパティの型をTypeSpecOrRefに統一）
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    properties:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties:
        Any: Any
      additional_properties: false
    additional_properties:
      name: AdditionalPropertiesFlag
      type: dict
      description: "Type alias.\n\nType aliases are created through the type statement::\n\
        \n    type Alias = int\n\nIn this example, Alias and int will be treated equivalently
        by static\ntype checkers.\n\nAt runtime, Alias is an instance of TypeAliasType.
        The __name__\nattribute holds the name of the type alias. The value of the
        type alias\nis stored in the __value__ attribute. It is evaluated lazily,
        so the\nvalue is computed only if the attribute is accessed.\n\nType aliases
        can also be generic::\n\n    type ListOrSet[T] = list[T] | set[T]\n\nIn this
        case, the type parameters of the alias are stored in the\n__type_params__
        attribute.\n\nSee PEP 695 for more information."
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
UnionTypeSpec:
  type: dict
  description: "Union型の仕様（参照型をTypeSpecOrRefに統一）\n\nUnion型の型仕様を定義します。参照型はTypeSpecOrRefに統一されています。"
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    variants:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: Any
  additional_properties: false
GenericTypeSpec:
  type: dict
  description: "Generic型の仕様（例: Generic[T]）（参照型をTypeSpecOrRefに統一）\n\nGeneric型の型仕様を定義します（例:
    Generic[T]）。\n参照型はTypeSpecOrRefに統一されています。"
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    params:
      name: list
      type: list
      description: "Built-in mutable sequence.\n\nIf no argument is given, the constructor
        creates a new empty list.\nThe argument must be an iterable if specified."
      required: true
      items: Any
  additional_properties: false
TypeRoot:
  type: dict
  description: YAML型仕様のルートモデル (v1.1構造、循環耐性強化）
  required: true
  properties:
    types:
      name: dict
      type: dict
      description: "dict() -> new empty dictionary\ndict(mapping) -> new dictionary
        initialized from a mapping object's\n    (key, value) pairs\ndict(iterable)
        -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n\
        \        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value
        pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
