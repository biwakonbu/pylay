# ====================================
# pylay自動生成ファイル
# このファイルを直接編集しないでください
# 次回の pylay yaml 実行時に削除・再生成されます
# ====================================
# Generated by: pylay yaml /home/biwakonbu/github/pylay/src/core/analyzer
# Source: /home/biwakonbu/github/pylay/src/core/analyzer
# Generated at: 2025-10-08T15:52:00.406088+00:00

_metadata:
  generated_by: pylay yaml
  source: /home/biwakonbu/github/pylay/src/core/analyzer
  source_type: directory
  file_count: 11
  generated_at: 2025-10-08T15:52:00.406946+00:00
  pylay_version: 0.5.0

CodeContext:
  type: dict
  description: コードコンテキスト情報
  required: true
  properties:
    before_lines:
      name: list[str]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    target_line:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    after_lines:
      name: list[str]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    line_number:
      name: LineNumber
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
TypeIgnoreIssue:
  type: dict
  description: 'type: ignore の問題箇所の情報'
  required: true
  properties:
    file_path:
      name: FilePath
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    line_number:
      name: LineNumber
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    ignore_type:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    cause:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    detail:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    code_context:
      name: CodeContext
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    priority:
      name: Priority
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    solutions:
      name: list[str]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
TypeIgnoreSummary:
  type: dict
  description: 'type: ignore 全体のサマリー情報'
  required: true
  properties:
    total_count:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    high_priority_count:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    medium_priority_count:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    low_priority_count:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    by_category:
      name: dict[str, int]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
CodeLocation:
  type: dict
  description: コードの位置情報
  required: true
  properties:
    file:
      name: Path
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    line:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    column:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    context_before:
      name: list[str]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    code:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    context_after:
      name: list[str]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
QualityIssue:
  type: dict
  description: 品質問題の情報
  required: true
  properties:
    issue_type:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    severity:
      name: SeverityName
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    message:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    location:
      name: CodeLocation | None
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    suggestion:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    improvement_plan:
      name: str
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    recommended_type:
      name: str | None
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    primitive_type:
      name: str | None
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    priority_score:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    impact_score:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    difficulty_score:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
QualityCheckResult:
  type: dict
  description: 品質チェックの結果
  required: true
  properties:
    total_issues:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    error_count:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    warning_count:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    advice_count:
      name: int
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    has_errors:
      name: bool
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    overall_score:
      name: Annotated[float, Field(ge=0.0, le=1.0)]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    issues:
      name: list[QualityIssue]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    statistics:
      name: TypeStatistics
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    thresholds:
      name: LevelThresholds
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    severity_levels:
      name: list[SeverityLevel]
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
TypeDefinition:
  type: dict
  description: |-
    型定義の情報

    Attributes:
        name: 型の名前
        level: 型定義レベル（level1/level2/level3/other）
        file_path: ファイルパス
        line_number: 行番号
        definition: 型定義のコード
        category: 型のカテゴリ（type_alias/annotated/basemodel/class/dataclass等）
        docstring: docstring（存在する場合）
        has_docstring: docstringが存在するか
        docstring_lines: docstringの行数
        target_level: docstringで指定された目標レベル
            （@target-level: level1/level2/level3）
        keep_as_is: 現状維持フラグ（@keep-as-is: trueの場合はレベルアップ推奨しない）
  required: true
  properties:
    name:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    level:
      name: Literal
      type: unknown
      description:
      required: true
    file_path:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    line_number:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    definition:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    category:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    docstring:
      name: Union[str, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
      - NoneType
    has_docstring:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    docstring_lines:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    target_level:
      name: Union[Literal, NoneType]
      type: union
      description:
      required: true
      variants:
      - name: Literal
        type: unknown
        description:
        required: true
      - NoneType
    keep_as_is:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
  additional_properties: false
DocstringDetail:
  type: dict
  description: |-
    docstringの詳細情報

    Attributes:
        has_summary: 概要行が存在するか
        has_description: 詳細説明が存在するか
        has_attributes: Attributesセクションが存在するか
        has_args: Argsセクションが存在するか
        has_returns: Returnsセクションが存在するか
        has_examples: Examplesセクションが存在するか
        format_style: docstringフォーマット
        line_count: docstringの行数
        detail_score: 詳細度スコア（0.0-1.0）
  required: true
  properties:
    has_summary:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    has_description:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    has_attributes:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    has_args:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    has_returns:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    has_examples:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    format_style:
      name: Literal
      type: unknown
      description:
      required: true
    line_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    detail_score:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
  additional_properties: false
DocumentationStatistics:
  type: dict
  description: |-
    ドキュメント統計情報

    Attributes:
        total_types: 型定義の総数
        documented_types: docstringが存在する型の数
        undocumented_types: docstringが存在しない型の数
        implementation_rate: 実装率（0.0-1.0）
        minimal_docstrings: 最低限のdocstring（1行のみ）の数
        detailed_docstrings: 詳細なdocstringの数
        detail_rate: 詳細度率（0.0-1.0）
        avg_docstring_lines: 平均docstring行数
        quality_score: 総合品質スコア（実装率 × 詳細度）
        by_level: レベル別のdocstring統計（カウント値のみ）
        by_level_avg_lines: レベル別の平均docstring行数
        by_format: フォーマット別のdocstring数
  required: true
  properties:
    total_types:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    documented_types:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    undocumented_types:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    implementation_rate:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    minimal_docstrings:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    detailed_docstrings:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    detail_rate:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    avg_docstring_lines:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    quality_score:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    by_level:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        dict:
          name: dict
          type: dict
          description: |-
            dict() -> new empty dictionary
            dict(mapping) -> new dictionary initialized from a mapping object's
                (key, value) pairs
            dict(iterable) -> new dictionary initialized as if via:
                d = {}
                for k, v in iterable:
                    d[k] = v
            dict(**kwargs) -> new dictionary initialized with the name=value pairs
                in the keyword argument list.  For example:  dict(one=1, two=2)
          required: true
          properties:
            int:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
          additional_properties: false
      additional_properties: false
    by_level_avg_lines:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        float:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
      additional_properties: false
    by_format:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        int:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
      additional_properties: false
  additional_properties: false
DocstringRecommendation:
  type: dict
  description: |-
    docstring改善推奨

    Attributes:
        type_name: 型名
        file_path: ファイルパス
        line_number: 行番号
        current_status: 現在の状態
        recommended_action: 推奨アクション
        priority: 優先度
        reasons: 推奨理由
        suggested_template: 推奨docstringテンプレート
        detail_gaps: 不足しているセクション
  required: true
  properties:
    type_name:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    file_path:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    line_number:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    current_status:
      name: Literal
      type: unknown
      description:
      required: true
    recommended_action:
      name: Literal
      type: unknown
      description:
      required: true
    priority:
      name: Literal
      type: unknown
      description:
      required: true
    reasons:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items:
        name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
    suggested_template:
      name: Union[str, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
      - NoneType
    detail_gaps:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items:
        name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
  additional_properties: false
TypeStatistics:
  type: dict
  description: |-
    型定義の統計情報

    Attributes:
        total_count: 型定義の総数
        level1_count: Level 1の数
        level2_count: Level 2の数
        level3_count: Level 3の数
        other_count: その他の数
        level1_ratio: Level 1の比率
        level2_ratio: Level 2の比率
        level3_ratio: Level 3の比率
        other_ratio: その他の比率
        by_directory: ディレクトリ別の統計
        by_category: カテゴリ別の統計
        documentation: ドキュメント統計
        primitive_usage_count: primitive型の直接使用数
        deprecated_typing_count: 非推奨typing使用数
        primitive_usage_ratio: primitive型の直接使用比率
        deprecated_typing_ratio: 非推奨typing使用比率
  required: true
  properties:
    total_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    level1_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    level2_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    level3_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    other_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    level1_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    level2_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    level3_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    other_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    by_directory:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        dict:
          name: dict
          type: dict
          description: |-
            dict() -> new empty dictionary
            dict(mapping) -> new dictionary initialized from a mapping object's
                (key, value) pairs
            dict(iterable) -> new dictionary initialized as if via:
                d = {}
                for k, v in iterable:
                    d[k] = v
            dict(**kwargs) -> new dictionary initialized with the name=value pairs
                in the keyword argument list.  For example:  dict(one=1, two=2)
          required: true
          properties:
            int:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
          additional_properties: false
      additional_properties: false
    by_category:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        int:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
      additional_properties: false
    documentation:
      name: DocumentationStatistics
      type: dict
      description: |-
        ドキュメント統計情報

        Attributes:
            total_types: 型定義の総数
            documented_types: docstringが存在する型の数
            undocumented_types: docstringが存在しない型の数
            implementation_rate: 実装率（0.0-1.0）
            minimal_docstrings: 最低限のdocstring（1行のみ）の数
            detailed_docstrings: 詳細なdocstringの数
            detail_rate: 詳細度率（0.0-1.0）
            avg_docstring_lines: 平均docstring行数
            quality_score: 総合品質スコア（実装率 × 詳細度）
            by_level: レベル別のdocstring統計（カウント値のみ）
            by_level_avg_lines: レベル別の平均docstring行数
            by_format: フォーマット別のdocstring数
      required: true
      properties:
        total_types:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        documented_types:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        undocumented_types:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        implementation_rate:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        minimal_docstrings:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        detailed_docstrings:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        detail_rate:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        avg_docstring_lines:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        quality_score:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        by_level:
          name: dict
          type: dict
          description: |-
            dict() -> new empty dictionary
            dict(mapping) -> new dictionary initialized from a mapping object's
                (key, value) pairs
            dict(iterable) -> new dictionary initialized as if via:
                d = {}
                for k, v in iterable:
                    d[k] = v
            dict(**kwargs) -> new dictionary initialized with the name=value pairs
                in the keyword argument list.  For example:  dict(one=1, two=2)
          required: true
          properties:
            dict:
              name: dict
              type: dict
              description: |-
                dict() -> new empty dictionary
                dict(mapping) -> new dictionary initialized from a mapping object's
                    (key, value) pairs
                dict(iterable) -> new dictionary initialized as if via:
                    d = {}
                    for k, v in iterable:
                        d[k] = v
                dict(**kwargs) -> new dictionary initialized with the name=value pairs
                    in the keyword argument list.  For example:  dict(one=1, two=2)
              required: true
              properties:
                int:
                  name: int
                  type: int
                  description: |-
                    int([x]) -> integer
                    int(x, base=10) -> integer

                    Convert a number or string to an integer, or return 0 if no arguments
                    are given.  If x is a number, return x.__int__().  For floating-point
                    numbers, this truncates towards zero.

                    If x is not a number or if base is given, then x must be a string,
                    bytes, or bytearray instance representing an integer literal in the
                    given base.  The literal can be preceded by '+' or '-' and be surrounded
                    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                    Base 0 means to interpret the base from the string as an integer literal.
                    >>> int('0b100', base=0)
                    4
                  required: true
              additional_properties: false
          additional_properties: false
        by_level_avg_lines:
          name: dict
          type: dict
          description: |-
            dict() -> new empty dictionary
            dict(mapping) -> new dictionary initialized from a mapping object's
                (key, value) pairs
            dict(iterable) -> new dictionary initialized as if via:
                d = {}
                for k, v in iterable:
                    d[k] = v
            dict(**kwargs) -> new dictionary initialized with the name=value pairs
                in the keyword argument list.  For example:  dict(one=1, two=2)
          required: true
          properties:
            float:
              name: float
              type: float
              description: Convert a string or number to a floating-point number, if possible.
              required: true
          additional_properties: false
        by_format:
          name: dict
          type: dict
          description: |-
            dict() -> new empty dictionary
            dict(mapping) -> new dictionary initialized from a mapping object's
                (key, value) pairs
            dict(iterable) -> new dictionary initialized as if via:
                d = {}
                for k, v in iterable:
                    d[k] = v
            dict(**kwargs) -> new dictionary initialized with the name=value pairs
                in the keyword argument list.  For example:  dict(one=1, two=2)
          required: true
          properties:
            int:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
          additional_properties: false
      additional_properties: false
    primitive_usage_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    deprecated_typing_count:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    primitive_usage_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    deprecated_typing_ratio:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
  additional_properties: false
UpgradeRecommendation:
  type: dict
  description: |-
    型レベルアップ・ダウンの推奨事項

    Attributes:
        type_name: 型名
        file_path: ファイルパス
        line_number: 行番号
        current_level: 現在のレベル
        recommended_level: 推奨レベル（level1/level2/level3/investigate）
        confidence: 確信度（0.0-1.0）
        reasons: 推奨理由
        suggested_validator: Level 2への昇格時のバリデータコード
        suggested_implementation: Level 3への昇格時の実装例
        priority: 優先度
        is_downgrade: レベルダウン推奨の場合True
  required: true
  properties:
    type_name:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    file_path:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    line_number:
      name: int
      type: int
      description: |-
        int([x]) -> integer
        int(x, base=10) -> integer

        Convert a number or string to an integer, or return 0 if no arguments
        are given.  If x is a number, return x.__int__().  For floating-point
        numbers, this truncates towards zero.

        If x is not a number or if base is given, then x must be a string,
        bytes, or bytearray instance representing an integer literal in the
        given base.  The literal can be preceded by '+' or '-' and be surrounded
        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
        Base 0 means to interpret the base from the string as an integer literal.
        >>> int('0b100', base=0)
        4
      required: true
    current_level:
      name: Literal
      type: unknown
      description:
      required: true
    recommended_level:
      name: Literal
      type: unknown
      description:
      required: true
    confidence:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    reasons:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items:
        name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
    suggested_validator:
      name: Union[str, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
      - NoneType
    suggested_implementation:
      name: Union[str, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
      - NoneType
    priority:
      name: Literal
      type: unknown
      description:
      required: true
    is_downgrade:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
  additional_properties: false
TypeAnalysisReport:
  type: dict
  description: |-
    型定義分析レポート

    Attributes:
        statistics: 統計情報
        type_definitions: 型定義リスト
        recommendations: 一般的な推奨事項
        upgrade_recommendations: 型レベルアップ推奨
        docstring_recommendations: docstring改善推奨
        threshold_ratios: 警告閾値（level1_max/level2_min/level3_min）
        deviation_from_threshold: 警告閾値との乖離
  required: true
  properties:
    statistics:
      name: TypeStatistics
      type: dict
      description: |-
        型定義の統計情報

        Attributes:
            total_count: 型定義の総数
            level1_count: Level 1の数
            level2_count: Level 2の数
            level3_count: Level 3の数
            other_count: その他の数
            level1_ratio: Level 1の比率
            level2_ratio: Level 2の比率
            level3_ratio: Level 3の比率
            other_ratio: その他の比率
            by_directory: ディレクトリ別の統計
            by_category: カテゴリ別の統計
            documentation: ドキュメント統計
            primitive_usage_count: primitive型の直接使用数
            deprecated_typing_count: 非推奨typing使用数
            primitive_usage_ratio: primitive型の直接使用比率
            deprecated_typing_ratio: 非推奨typing使用比率
      required: true
      properties:
        total_count:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        level1_count:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        level2_count:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        level3_count:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        other_count:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        level1_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        level2_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        level3_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        other_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        by_directory:
          name: dict
          type: dict
          description: |-
            dict() -> new empty dictionary
            dict(mapping) -> new dictionary initialized from a mapping object's
                (key, value) pairs
            dict(iterable) -> new dictionary initialized as if via:
                d = {}
                for k, v in iterable:
                    d[k] = v
            dict(**kwargs) -> new dictionary initialized with the name=value pairs
                in the keyword argument list.  For example:  dict(one=1, two=2)
          required: true
          properties:
            dict:
              name: dict
              type: dict
              description: |-
                dict() -> new empty dictionary
                dict(mapping) -> new dictionary initialized from a mapping object's
                    (key, value) pairs
                dict(iterable) -> new dictionary initialized as if via:
                    d = {}
                    for k, v in iterable:
                        d[k] = v
                dict(**kwargs) -> new dictionary initialized with the name=value pairs
                    in the keyword argument list.  For example:  dict(one=1, two=2)
              required: true
              properties:
                int:
                  name: int
                  type: int
                  description: |-
                    int([x]) -> integer
                    int(x, base=10) -> integer

                    Convert a number or string to an integer, or return 0 if no arguments
                    are given.  If x is a number, return x.__int__().  For floating-point
                    numbers, this truncates towards zero.

                    If x is not a number or if base is given, then x must be a string,
                    bytes, or bytearray instance representing an integer literal in the
                    given base.  The literal can be preceded by '+' or '-' and be surrounded
                    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                    Base 0 means to interpret the base from the string as an integer literal.
                    >>> int('0b100', base=0)
                    4
                  required: true
              additional_properties: false
          additional_properties: false
        by_category:
          name: dict
          type: dict
          description: |-
            dict() -> new empty dictionary
            dict(mapping) -> new dictionary initialized from a mapping object's
                (key, value) pairs
            dict(iterable) -> new dictionary initialized as if via:
                d = {}
                for k, v in iterable:
                    d[k] = v
            dict(**kwargs) -> new dictionary initialized with the name=value pairs
                in the keyword argument list.  For example:  dict(one=1, two=2)
          required: true
          properties:
            int:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
          additional_properties: false
        documentation:
          name: DocumentationStatistics
          type: dict
          description: |-
            ドキュメント統計情報

            Attributes:
                total_types: 型定義の総数
                documented_types: docstringが存在する型の数
                undocumented_types: docstringが存在しない型の数
                implementation_rate: 実装率（0.0-1.0）
                minimal_docstrings: 最低限のdocstring（1行のみ）の数
                detailed_docstrings: 詳細なdocstringの数
                detail_rate: 詳細度率（0.0-1.0）
                avg_docstring_lines: 平均docstring行数
                quality_score: 総合品質スコア（実装率 × 詳細度）
                by_level: レベル別のdocstring統計（カウント値のみ）
                by_level_avg_lines: レベル別の平均docstring行数
                by_format: フォーマット別のdocstring数
          required: true
          properties:
            total_types:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
            documented_types:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
            undocumented_types:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
            implementation_rate:
              name: float
              type: float
              description: Convert a string or number to a floating-point number, if possible.
              required: true
            minimal_docstrings:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
            detailed_docstrings:
              name: int
              type: int
              description: |-
                int([x]) -> integer
                int(x, base=10) -> integer

                Convert a number or string to an integer, or return 0 if no arguments
                are given.  If x is a number, return x.__int__().  For floating-point
                numbers, this truncates towards zero.

                If x is not a number or if base is given, then x must be a string,
                bytes, or bytearray instance representing an integer literal in the
                given base.  The literal can be preceded by '+' or '-' and be surrounded
                by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                Base 0 means to interpret the base from the string as an integer literal.
                >>> int('0b100', base=0)
                4
              required: true
            detail_rate:
              name: float
              type: float
              description: Convert a string or number to a floating-point number, if possible.
              required: true
            avg_docstring_lines:
              name: float
              type: float
              description: Convert a string or number to a floating-point number, if possible.
              required: true
            quality_score:
              name: float
              type: float
              description: Convert a string or number to a floating-point number, if possible.
              required: true
            by_level:
              name: dict
              type: dict
              description: |-
                dict() -> new empty dictionary
                dict(mapping) -> new dictionary initialized from a mapping object's
                    (key, value) pairs
                dict(iterable) -> new dictionary initialized as if via:
                    d = {}
                    for k, v in iterable:
                        d[k] = v
                dict(**kwargs) -> new dictionary initialized with the name=value pairs
                    in the keyword argument list.  For example:  dict(one=1, two=2)
              required: true
              properties:
                dict:
                  name: dict
                  type: dict
                  description: |-
                    dict() -> new empty dictionary
                    dict(mapping) -> new dictionary initialized from a mapping object's
                        (key, value) pairs
                    dict(iterable) -> new dictionary initialized as if via:
                        d = {}
                        for k, v in iterable:
                            d[k] = v
                    dict(**kwargs) -> new dictionary initialized with the name=value pairs
                        in the keyword argument list.  For example:  dict(one=1, two=2)
                  required: true
                  properties:
                    int:
                      name: int
                      type: int
                      description: |-
                        int([x]) -> integer
                        int(x, base=10) -> integer

                        Convert a number or string to an integer, or return 0 if no arguments
                        are given.  If x is a number, return x.__int__().  For floating-point
                        numbers, this truncates towards zero.

                        If x is not a number or if base is given, then x must be a string,
                        bytes, or bytearray instance representing an integer literal in the
                        given base.  The literal can be preceded by '+' or '-' and be surrounded
                        by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                        Base 0 means to interpret the base from the string as an integer literal.
                        >>> int('0b100', base=0)
                        4
                      required: true
                  additional_properties: false
              additional_properties: false
            by_level_avg_lines:
              name: dict
              type: dict
              description: |-
                dict() -> new empty dictionary
                dict(mapping) -> new dictionary initialized from a mapping object's
                    (key, value) pairs
                dict(iterable) -> new dictionary initialized as if via:
                    d = {}
                    for k, v in iterable:
                        d[k] = v
                dict(**kwargs) -> new dictionary initialized with the name=value pairs
                    in the keyword argument list.  For example:  dict(one=1, two=2)
              required: true
              properties:
                float:
                  name: float
                  type: float
                  description: Convert a string or number to a floating-point number, if possible.
                  required: true
              additional_properties: false
            by_format:
              name: dict
              type: dict
              description: |-
                dict() -> new empty dictionary
                dict(mapping) -> new dictionary initialized from a mapping object's
                    (key, value) pairs
                dict(iterable) -> new dictionary initialized as if via:
                    d = {}
                    for k, v in iterable:
                        d[k] = v
                dict(**kwargs) -> new dictionary initialized with the name=value pairs
                    in the keyword argument list.  For example:  dict(one=1, two=2)
              required: true
              properties:
                int:
                  name: int
                  type: int
                  description: |-
                    int([x]) -> integer
                    int(x, base=10) -> integer

                    Convert a number or string to an integer, or return 0 if no arguments
                    are given.  If x is a number, return x.__int__().  For floating-point
                    numbers, this truncates towards zero.

                    If x is not a number or if base is given, then x must be a string,
                    bytes, or bytearray instance representing an integer literal in the
                    given base.  The literal can be preceded by '+' or '-' and be surrounded
                    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
                    Base 0 means to interpret the base from the string as an integer literal.
                    >>> int('0b100', base=0)
                    4
                  required: true
              additional_properties: false
          additional_properties: false
        primitive_usage_count:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        deprecated_typing_count:
          name: int
          type: int
          description: |-
            int([x]) -> integer
            int(x, base=10) -> integer

            Convert a number or string to an integer, or return 0 if no arguments
            are given.  If x is a number, return x.__int__().  For floating-point
            numbers, this truncates towards zero.

            If x is not a number or if base is given, then x must be a string,
            bytes, or bytearray instance representing an integer literal in the
            given base.  The literal can be preceded by '+' or '-' and be surrounded
            by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
            Base 0 means to interpret the base from the string as an integer literal.
            >>> int('0b100', base=0)
            4
          required: true
        primitive_usage_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        deprecated_typing_ratio:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
      additional_properties: false
    type_definitions:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: TypeDefinition
    recommendations:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items:
        name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
    upgrade_recommendations:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: UpgradeRecommendation
    docstring_recommendations:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: DocstringRecommendation
    threshold_ratios:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        float:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
      additional_properties: false
    deviation_from_threshold:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        float:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
      additional_properties: false
  additional_properties: false
