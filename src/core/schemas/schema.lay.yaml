# ====================================
# pylay自動生成ファイル
# このファイルを直接編集しないでください
# 次回の pylay yaml 実行時に削除・再生成されます
# ====================================
# Generated by: pylay yaml /home/biwakonbu/github/pylay/src/core/schemas
# Source: /home/biwakonbu/github/pylay/src/core/schemas
# Generated at: 2025-10-08T15:52:00.468697+00:00

_metadata:
  generated_by: pylay yaml
  source: /home/biwakonbu/github/pylay/src/core/schemas
  source_type: directory
  file_count: 4
  generated_at: 2025-10-08T15:52:00.469507+00:00
  pylay_version: 0.5.0

RefPlaceholder:
  type: dict
  description: 参照文字列を保持するためのプレースホルダー（Pydantic v2対応強化）
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    ref_name:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
  additional_properties: false
TypeSpec:
  type: dict
  description: YAML形式の型仕様の基底モデル（v1.1対応、循環参照耐性強化）
  required: true
  properties:
    name:
      name: Union[TypeSpecName, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - TypeSpecName
      - NoneType
    type:
      name: TypeSpecType
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    description:
      name: Union[Description, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - Description
      - NoneType
    required:
      name: RequiredFlag
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
ListTypeSpec:
  type: dict
  description: リスト型の仕様
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    items:
      name: Any
      type: dict
      description: |-
        Special type indicating an unconstrained type.

        - Any is compatible with every type.
        - Any assumed to have all methods.
        - All values assumed to be instances of Any.

        Note that all the above statements are true from the point of view of
        static type checkers. At runtime, Any should not be used with instance
        checks.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
DictTypeSpec:
  type: dict
  description: 辞書型の仕様（プロパティの型をTypeSpecOrRefに統一）
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    properties:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties:
        Any: Any
      additional_properties: false
    additional_properties:
      name: AdditionalPropertiesFlag
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
UnionTypeSpec:
  type: dict
  description: |-
    Union型の仕様（参照型をTypeSpecOrRefに統一）

    Union型の型仕様を定義します。参照型はTypeSpecOrRefに統一されています。
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    variants:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: Any
  additional_properties: false
GenericTypeSpec:
  type: dict
  description: |-
    Generic型の仕様（例: Generic[T]）（参照型をTypeSpecOrRefに統一）

    Generic型の型仕様を定義します（例: Generic[T]）。
    参照型はTypeSpecOrRefに統一されています。
  required: true
  properties:
    type:
      name: Literal
      type: unknown
      description:
      required: true
    params:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: Any
  additional_properties: false
TypeRoot:
  type: dict
  description: YAML型仕様のルートモデル (v1.1構造、循環耐性強化）
  required: true
  properties:
    types:
      name: dict
      type: dict
      description: |-
        dict() -> new empty dictionary
        dict(mapping) -> new dictionary initialized from a mapping object's
            (key, value) pairs
        dict(iterable) -> new dictionary initialized as if via:
            d = {}
            for k, v in iterable:
                d[k] = v
        dict(**kwargs) -> new dictionary initialized with the name=value pairs
            in the keyword argument list.  For example:  dict(one=1, two=2)
      required: true
      properties: {}
      additional_properties: false
  additional_properties: false
RelationType:
  type: dict
  description: 関係の種類を定義する列挙型
  required: true
  properties: {}
  additional_properties: false
GraphNode:
  type: dict
  description: |-
    グラフのノードを表すクラス

    Attributes:
        id: ノードの一意の識別子 (自動生成可能)
        name: ノードの名前
        node_type: ノードの種類
        qualified_name: 完全修飾名
        attributes: ノードの追加属性
  required: true
  properties:
    id:
      name: Union[NodeId, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - NodeId
      - NoneType
    name:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    node_type:
      name: NodeType
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    qualified_name:
      name: Union[QualifiedName, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - QualifiedName
      - NoneType
    attributes:
      name: Union[NodeAttributes, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - NodeAttributes
      - NoneType
    source_file:
      name: Union[FilePath, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - FilePath
      - NoneType
    line_number:
      name: Union[LineNumber, NoneType]
      type: union
      description:
      required: true
      variants:
      - LineNumber
      - NoneType
  additional_properties: false
GraphEdge:
  type: dict
  description: |-
    グラフのエッジを表すクラス

    Attributes:
        source: 始点ノードのID
        target: 終点ノードのID
        relation_type: 関係の種類
        weight: エッジの重み
        attributes: エッジの追加属性
  required: true
  properties:
    source:
      name: NodeId
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    target:
      name: NodeId
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    relation_type:
      name: RelationType
      type: dict
      description: 関係の種類を定義する列挙型
      required: true
      properties: {}
      additional_properties: false
    weight:
      name: Weight
      type: dict
      description: |-
        NewType creates simple unique types with almost zero runtime overhead.

        NewType(name, tp) is considered a subtype of tp
        by static type checkers. At runtime, NewType(name, tp) returns
        a dummy callable that simply returns its argument.

        Usage::

            UserId = NewType('UserId', int)

            def name_by_id(user_id: UserId) -> str:
                ...

            UserId('user')          # Fails type check

            name_by_id(42)          # Fails type check
            name_by_id(UserId(42))  # OK

            num = UserId(5) + 1     # type: int
      required: true
      properties: {}
      additional_properties: false
    attributes:
      name: Union[NodeAttributes, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - NodeAttributes
      - NoneType
    metadata:
      name: Union[GraphMetadata, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - GraphMetadata
      - NoneType
  additional_properties: false
TypeDependencyGraph:
  type: dict
  description: |-
    型依存関係グラフを表すクラス

    Attributes:
        nodes: グラフ内の全てのノード
        edges: グラフ内の全てのエッジ
        metadata: グラフのメタデータ
  required: true
  properties:
    nodes:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: GraphNode
    edges:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: GraphEdge
    metadata:
      name: Union[GraphMetadata, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - GraphMetadata
      - NoneType
    inferred_nodes:
      name: Union[list, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - name: list
        type: list
        description: |-
          Built-in mutable sequence.

          If no argument is given, the constructor creates a new empty list.
          The argument must be an iterable if specified.
        required: true
        items: GraphNode
      - NoneType
  additional_properties: false
LevelThresholds:
  type: dict
  description: 型レベル閾値設定
  required: true
  properties:
    level1_max:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    level2_min:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
    level3_min:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
  additional_properties: false
ErrorCondition:
  type: dict
  description: エラー条件設定
  required: true
  properties:
    condition:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    message:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
  additional_properties: false
SeverityLevel:
  type: dict
  description: 深刻度レベル設定
  required: true
  properties:
    name:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    color:
      name: Literal
      type: unknown
      description:
      required: true
    threshold:
      name: float
      type: float
      description: Convert a string or number to a floating-point number, if possible.
      required: true
  additional_properties: false
ImprovementGuidance:
  type: dict
  description: 改善プランのガイダンス設定
  required: true
  properties:
    level:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    suggestion:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
  additional_properties: false
GenerationConfig:
  type: dict
  description: ファイル生成設定
  required: true
  properties:
    lay_suffix:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    lay_yaml_suffix:
      name: str
      type: str
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
    add_generation_header:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    include_source_path:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
  additional_properties: false
OutputConfig:
  type: dict
  description: 出力設定
  required: true
  properties:
    yaml_output_dir:
      name: Union[str, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
      - NoneType
    markdown_output_dir:
      name: Union[str, NoneType]
      type: union
      description: |-
        Represent a PEP 604 union type

        E.g. for int | str
      required: true
      variants:
      - name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
      - NoneType
    mirror_package_structure:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    include_metadata:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
    preserve_docstrings:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
  additional_properties: false
ImportsConfig:
  type: dict
  description: import設定
  required: true
  properties:
    use_relative_imports:
      name: bool
      type: bool
      description: |-
        Returns True when the argument is true, False otherwise.
        The builtins True and False are the only two instances of the class bool.
        The class bool is a subclass of the class int, and cannot be subclassed.
      required: true
  additional_properties: false
QualityCheckConfig:
  type: dict
  description: 品質チェック設定
  required: true
  properties:
    level_thresholds:
      name: LevelThresholds
      type: dict
      description: 型レベル閾値設定
      required: true
      properties:
        level1_max:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        level2_min:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
        level3_min:
          name: float
          type: float
          description: Convert a string or number to a floating-point number, if possible.
          required: true
      additional_properties: false
    error_conditions:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: ErrorCondition
    severity_levels:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: SeverityLevel
    improvement_guidance:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: ImprovementGuidance
  additional_properties: false
PylayConfig:
  type: dict
  description: |-
    pylayの設定を管理するPydanticモデル

    pyproject.tomlの[tool.pylay]セクションに対応します。
  required: true
  properties:
    target_dirs:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items:
        name: str
        type: str
        description: |-
          str(object='') -> str
          str(bytes_or_buffer[, encoding[, errors]]) -> str

          Create a new string object from the given object. If encoding or
          errors is specified, then the object must expose a data buffer
          that will be decoded using the given encoding and error handler.
          Otherwise, returns the result of object.__str__() (if defined)
          or repr(object).
          encoding defaults to 'utf-8'.
          errors defaults to 'strict'.
        required: true
    output_dir:
      name: DirectoryPath
      type: dict
      description: |-
        NewType creates simple unique types with almost zero runtime overhead.

        NewType(name, tp) is considered a subtype of tp
        by static type checkers. At runtime, NewType(name, tp) returns
        a dummy callable that simply returns its argument.

        Usage::

            UserId = NewType('UserId', int)

            def name_by_id(user_id: UserId) -> str:
                ...

            UserId('user')          # Fails type check

            name_by_id(42)          # Fails type check
            name_by_id(UserId(42))  # OK

            num = UserId(5) + 1     # type: int
      required: true
      properties: {}
      additional_properties: false
    generate_markdown:
      name: GenerateMarkdownFlag
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    extract_deps:
      name: ExtractDepsFlag
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    infer_level:
      name: InferLevel
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    clean_output_dir:
      name: CleanOutputDirFlag
      type: dict
      description: |-
        Type alias.

        Type aliases are created through the type statement::

            type Alias = int

        In this example, Alias and int will be treated equivalently by static
        type checkers.

        At runtime, Alias is an instance of TypeAliasType. The __name__
        attribute holds the name of the type alias. The value of the type alias
        is stored in the __value__ attribute. It is evaluated lazily, so the
        value is computed only if the attribute is accessed.

        Type aliases can also be generic::

            type ListOrSet[T] = list[T] | set[T]

        In this case, the type parameters of the alias are stored in the
        __type_params__ attribute.

        See PEP 695 for more information.
      required: true
      properties: {}
      additional_properties: false
    exclude_patterns:
      name: list
      type: list
      description: |-
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
      required: true
      items: GlobPattern
    max_depth:
      name: MaxDepth
      type: dict
      description: |-
        NewType creates simple unique types with almost zero runtime overhead.

        NewType(name, tp) is considered a subtype of tp
        by static type checkers. At runtime, NewType(name, tp) returns
        a dummy callable that simply returns its argument.

        Usage::

            UserId = NewType('UserId', int)

            def name_by_id(user_id: UserId) -> str:
                ...

            UserId('user')          # Fails type check

            name_by_id(42)          # Fails type check
            name_by_id(UserId(42))  # OK

            num = UserId(5) + 1     # type: int
      required: true
      properties: {}
      additional_properties: false
    quality_check:
      name: QualityCheckConfig | None
      type: dict
      description: |-
        str(object='') -> str
        str(bytes_or_buffer[, encoding[, errors]]) -> str

        Create a new string object from the given object. If encoding or
        errors is specified, then the object must expose a data buffer
        that will be decoded using the given encoding and error handler.
        Otherwise, returns the result of object.__str__() (if defined)
        or repr(object).
        encoding defaults to 'utf-8'.
        errors defaults to 'strict'.
      required: true
      properties: {}
      additional_properties: false
    generation:
      name: GenerationConfig
      type: dict
      description: ファイル生成設定
      required: true
      properties:
        lay_suffix:
          name: str
          type: str
          description: |-
            str(object='') -> str
            str(bytes_or_buffer[, encoding[, errors]]) -> str

            Create a new string object from the given object. If encoding or
            errors is specified, then the object must expose a data buffer
            that will be decoded using the given encoding and error handler.
            Otherwise, returns the result of object.__str__() (if defined)
            or repr(object).
            encoding defaults to 'utf-8'.
            errors defaults to 'strict'.
          required: true
        lay_yaml_suffix:
          name: str
          type: str
          description: |-
            str(object='') -> str
            str(bytes_or_buffer[, encoding[, errors]]) -> str

            Create a new string object from the given object. If encoding or
            errors is specified, then the object must expose a data buffer
            that will be decoded using the given encoding and error handler.
            Otherwise, returns the result of object.__str__() (if defined)
            or repr(object).
            encoding defaults to 'utf-8'.
            errors defaults to 'strict'.
          required: true
        add_generation_header:
          name: bool
          type: bool
          description: |-
            Returns True when the argument is true, False otherwise.
            The builtins True and False are the only two instances of the class bool.
            The class bool is a subclass of the class int, and cannot be subclassed.
          required: true
        include_source_path:
          name: bool
          type: bool
          description: |-
            Returns True when the argument is true, False otherwise.
            The builtins True and False are the only two instances of the class bool.
            The class bool is a subclass of the class int, and cannot be subclassed.
          required: true
      additional_properties: false
    output:
      name: OutputConfig
      type: dict
      description: 出力設定
      required: true
      properties:
        yaml_output_dir:
          name: Union[str, NoneType]
          type: union
          description: |-
            Represent a PEP 604 union type

            E.g. for int | str
          required: true
          variants:
          - name: str
            type: str
            description: |-
              str(object='') -> str
              str(bytes_or_buffer[, encoding[, errors]]) -> str

              Create a new string object from the given object. If encoding or
              errors is specified, then the object must expose a data buffer
              that will be decoded using the given encoding and error handler.
              Otherwise, returns the result of object.__str__() (if defined)
              or repr(object).
              encoding defaults to 'utf-8'.
              errors defaults to 'strict'.
            required: true
          - NoneType
        markdown_output_dir:
          name: Union[str, NoneType]
          type: union
          description: |-
            Represent a PEP 604 union type

            E.g. for int | str
          required: true
          variants:
          - name: str
            type: str
            description: |-
              str(object='') -> str
              str(bytes_or_buffer[, encoding[, errors]]) -> str

              Create a new string object from the given object. If encoding or
              errors is specified, then the object must expose a data buffer
              that will be decoded using the given encoding and error handler.
              Otherwise, returns the result of object.__str__() (if defined)
              or repr(object).
              encoding defaults to 'utf-8'.
              errors defaults to 'strict'.
            required: true
          - NoneType
        mirror_package_structure:
          name: bool
          type: bool
          description: |-
            Returns True when the argument is true, False otherwise.
            The builtins True and False are the only two instances of the class bool.
            The class bool is a subclass of the class int, and cannot be subclassed.
          required: true
        include_metadata:
          name: bool
          type: bool
          description: |-
            Returns True when the argument is true, False otherwise.
            The builtins True and False are the only two instances of the class bool.
            The class bool is a subclass of the class int, and cannot be subclassed.
          required: true
        preserve_docstrings:
          name: bool
          type: bool
          description: |-
            Returns True when the argument is true, False otherwise.
            The builtins True and False are the only two instances of the class bool.
            The class bool is a subclass of the class int, and cannot be subclassed.
          required: true
      additional_properties: false
    imports:
      name: ImportsConfig
      type: dict
      description: import設定
      required: true
      properties:
        use_relative_imports:
          name: bool
          type: bool
          description: |-
            Returns True when the argument is true, False otherwise.
            The builtins True and False are the only two instances of the class bool.
            The class bool is a subclass of the class int, and cannot be subclassed.
          required: true
      additional_properties: false
  additional_properties: false
